JavaScript插件化开发总结
jQuery插件的开发分为两种：一种是挂在jQuery命名空间下的全局函数，也可称为静态方法。
另一种是jQuery对象级别的方法，即挂在jQuery原型下的方法，这样通过选择器获取的jQuery对象实例也能共享该方法。
类级别的插件开发就是给"jQuery"类添加类方法，可以理解为添加静态方法。
添加一个全局函数
$.hello = function(){
    alert("Hello,大熊君！") ;
} ;
添加多个全局函数
$.extend({
    hello : function(name){
        // put your code here
    } ,
    world : function(){
        // put your code here
    }
}) ;
”$.extend(target, [object1], [objectN])“（该方法主要用于合并两个或更多对象的内容(属性)到第一个对象，并返回合并后的第一对象。

对象级别的插件开发
通过“$.fn.extend()”为原型动态挂载相关的属性
(function($){   
    $.fn.extend({   
        pluginName : function(opts){   
            // put your code here
        }   
    }) ;   
})(jQuery) ;  
直接添加动态属性到原型链上
(function($) {     
     $.fn.pluginName = function(){   
         // put your code here  
     } ;   
 })(jQuery) ; 
二者是等价的，对于一个jQuery插件，一个基本的函数就可以很好地工作，但是对于复杂一点的插件就需要提供各种各样的方法和私有函数。

（1），jQuery为开发插件提拱了两个方法，分别是：jQuery.fn.extend(object);  给jQuery对象添加方法。
jQuery.extend(object);  为扩展jQuery类本身.为类添加新的方法。
　　（2），把全部代码放在闭包(一个即时执行函数)里此时闭包相当于一个私有作用域，外部无法访问到内部的信息，并且不会存在全局变量的污染情况。官方创建开发规范的解释是：a) 避免全局依赖；b) 避免第三方破坏；c) 兼容jQuery操作符'$'和'jQuery '。
　　（3），提供插件的默认参数选项一个扩展性良好的插件应该是可以让使用者根据需求自定义参数选项，并控制插件的行为，所以提供恢复默认选项是很有必要的。你可以通过jQuery的extend方法来设置这些选项
　　（4），遍历多个元素并返回jQuery使用Sizzle选择器引擎，Sizzle可以为你的函数提供多元素操作（例如对所有类名相同的元素）。这是jQuery几个优秀的特性之一，在开发插件过程中即使你不准备为你的插件提供多元素支持，但为这做准备仍然是一个很好的实践。另外，jQuery有一个很好的特点就是可以进行方法级联，也可称为链式调用，所以我们不应该破坏这个特性，始终在方法中返回一个元素。
　　（5），一次性代码放在主循环以外这一条很重要，但是常常被忽略。简单的讲，如果你有一段代码是一堆默认值，只需要被实例化一次，而不是每次调用你插件功能的时候都需要实例化，你应该把这段代码放在插件方法的外面。


